import{_ as s,o as a,c as o,Q as n}from"./chunks/framework.419948d5.js";const h=JSON.parse('{"title":"Python Library Exploration","description":"","frontmatter":{"title":"Python Library Exploration","lang":"en-US"},"headers":[],"relativePath":"notes/python/python-libraries.md","filePath":"notes/python/python-libraries.md"}'),l={name:"notes/python/python-libraries.md"},e=n(`<h2 id="up-next" tabindex="-1">Up Next <a class="header-anchor" href="#up-next" aria-label="Permalink to &quot;Up Next&quot;">​</a></h2><ul><li><a href="https://github.com/kayak/pypika" target="_blank" rel="noreferrer">pypika</a></li><li><a href="https://github.com/dagworks-inc/hamilton" target="_blank" rel="noreferrer">hamilton</a></li></ul><h2 id="completed" tabindex="-1">Completed <a class="header-anchor" href="#completed" aria-label="Permalink to &quot;Completed&quot;">​</a></h2><details class="details custom-block"><summary>chromedb</summary><p><a href="https://docs.trychroma.com/getting-started" target="_blank" rel="noreferrer">Chroma</a> is an in-memory vector database. Built on top of great open-source tokenization and embeddings algorithms.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> chromadb</span></span>
<span class="line"><span style="color:#E1E4E8;">client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chromadb.Client()</span></span>
<span class="line"><span style="color:#E1E4E8;">collection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.create_collection(</span><span style="color:#9ECBFF;">&quot;my-collection&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line highlighted"><span style="color:#6A737D;"># A lot of magic here --&gt; tokenization, embedding</span></span>
<span class="line"><span style="color:#E1E4E8;">collection.add(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">documents</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&quot;This is a document about cat&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;This is a document about car&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;This is a document about bike&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">metadatas</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[{</span><span style="color:#9ECBFF;">&quot;category&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;animal&quot;</span><span style="color:#E1E4E8;">}, {</span><span style="color:#9ECBFF;">&quot;category&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;vehicle&quot;</span><span style="color:#E1E4E8;">}, {</span><span style="color:#9ECBFF;">&quot;category&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;vehicle&quot;</span><span style="color:#E1E4E8;">}],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">ids</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&quot;id1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;id2&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;id3&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">results </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> collection.query(</span><span style="color:#FFAB70;">query_texts</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&quot;vehicle&quot;</span><span style="color:#E1E4E8;">], </span><span style="color:#FFAB70;">n_results</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> chromadb</span></span>
<span class="line"><span style="color:#24292E;">client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> chromadb.Client()</span></span>
<span class="line"><span style="color:#24292E;">collection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.create_collection(</span><span style="color:#032F62;">&quot;my-collection&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line highlighted"><span style="color:#6A737D;"># A lot of magic here --&gt; tokenization, embedding</span></span>
<span class="line"><span style="color:#24292E;">collection.add(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">documents</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;This is a document about cat&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;This is a document about car&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;This is a document about bike&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">metadatas</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[{</span><span style="color:#032F62;">&quot;category&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;animal&quot;</span><span style="color:#24292E;">}, {</span><span style="color:#032F62;">&quot;category&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;vehicle&quot;</span><span style="color:#24292E;">}, {</span><span style="color:#032F62;">&quot;category&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;vehicle&quot;</span><span style="color:#24292E;">}],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">ids</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;id1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;id2&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;id3&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">results </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> collection.query(</span><span style="color:#E36209;">query_texts</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;vehicle&quot;</span><span style="color:#24292E;">], </span><span style="color:#E36209;">n_results</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span></code></pre></div></details><details class="details custom-block"><summary>DuckDB</summary><p><a href="https://duckdb.org/docs/api/python/overview.html" target="_blank" rel="noreferrer">DuckDB</a> is an in-memory analytical database. One use case suggested by a colleague - reads a CSV file very fast.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> duckdb</span></span>
<span class="line"><span style="color:#E1E4E8;">duckdb.sql(</span><span style="color:#9ECBFF;">&#39;SELECT * FROM &quot;example.csv&quot;&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> duckdb</span></span>
<span class="line"><span style="color:#24292E;">duckdb.sql(</span><span style="color:#032F62;">&#39;SELECT * FROM &quot;example.csv&quot;&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div></details><details class="details custom-block"><summary>ibis-framework</summary><p><a href="https://pypi.org/project/ibis-framework/" target="_blank" rel="noreferrer">ibis-framework</a> is a write once and execute SQL on many analytics engine. One use case - develop against pandas and scale to BigQuery. See <a href="https://ibis-project.org/tutorial/ibis-for-sql-users/#ibis-for-sql-users" target="_blank" rel="noreferrer">Ibis Docs - Tutorial for SQL</a></p></details>`,6),t=[e];function p(c,r,i,y,E,u){return a(),o("div",null,t)}const m=s(l,[["render",p]]);export{h as __pageData,m as default};
